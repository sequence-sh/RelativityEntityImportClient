include:
  - project: sequence/templates/cicd
    file: .gitlab/ci/default.default.yml
  - project: sequence/templates/cicd
    file: .gitlab/ci/default.rules.yml
  - project: sequence/templates/cicd
    file: .gitlab/ci/default.scripts.yml
  - project: sequence/templates/cicd
    file: .gitlab/ci/default.stages.yml
  - project: sequence/templates/cicd
    file: .gitlab/ci/default.variables.yml
  - project: sequence/templates/cicd
    file: .gitlab/ci/default.workflow.yml
  - project: sequence/templates/cicd
    file: .gitlab/ci/build.yml
  - project: sequence/templates/cicd
    file: .gitlab/ci/quality.yml
  - project: sequence/templates/cicd
    file: .gitlab/ci/package.yml
  - project: sequence/templates/cicd
    file: .gitlab/ci/push.yml
  - project: sequence/templates/cicd
    file: .gitlab/ci/sign.yml

default:
  image: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2019
  tags:
    - rt-powershell

variables:
  PACKAGE_NAME_EXE: Sequence.EntityImportClient
  PACKAGE_NAME_NUGET: Sequence.EntityImportClient

build dev:
  script:
    - nuget restore
    - msbuild -property:"Configuration=$CONFIG" -consoleLoggerParameters:"Summary;WarningsOnly;ErrorsOnly"

test dev:
  stage: test
  extends:
    - .rules_dev
  variables:
    CONFIG: $CONFIG_DEV
  script:
    - vstest.console.exe ".\EntityImportClient.Tests\bin\$CONFIG\EntityImportClient.Tests.dll"

test release:
  extends:
    - test dev
    - .rules_release
  variables:
    CONFIG: $CONFIG_RELEASE

version check dev:
  stage: test
  extends:
    - .rules_dev
  needs: []
  cache: {}
  script:
    - |
      if ($env:CI_JOB_NAME -eq "version check release") {
          Write-Host "Tag version           : ${env:CI_COMMIT_TAG}" ;
      }
      $timestamp = Get-Date -Format "yyMMddHHmm" ;
      Write-Host "Version timestamp     : $timestamp" ;
      $releasesUri = "https://gitlab.com/api/v4/projects/${env:CI_PROJECT_ID}/releases" ;
      $releasesRsp = Invoke-RestMethod -Uri $releasesUri -Headers @{ "JOB-TOKEN" = $env:CI_JOB_TOKEN } ;
      $releases = $releasesRsp | Select-Object -ExpandProperty name ;
      $protoPath = '.\EntityImportClient.Proto\EntityImportClient.Proto.csproj' ;
      $protoFile = Get-Content $protoPath -Raw ;
      $protoFile -match "<Version>(.+?)(\$\(VersionSuffix\))?</Version>" | Out-Null ;
      $protoVersion = $Matches[1] ;
      $projPath = '.\EntityImportClient\Properties\AssemblyInfo.cs' ;
      $aFile = Get-Content $projPath -Raw ;
      $aFile -match "AssemblyVersion\(`"([\d\.]+?)`"\)" | Out-Null ;
      $assemblyVersion = $Matches[1] ;
      $aFile -match "AssemblyFileVersion\(`"([\d\.]+?)`"\)" | Out-Null ;
      $assemblyFileVersion = $Matches[1] ;
      $assemblyVersion -match "(\d+\.){3}" | Out-Null ;
      $version = $Matches[0].TrimEnd('.') ;
      $suffix = "-" + $env:DEFAULT_PRERELEASE_VERSION ;
      if ($env:CI_COMMIT_BRANCH -eq $env:CI_DEFAULT_BRANCH) {
          $suffix += ".main" ;
      } else {
          $suffix += ".dev" ;
      }
      $suffix += ".$timestamp" ;
      Write-Host "Assembly Version      : $assemblyVersion" ;
      Write-Host "Assembly File Version : $assemblyFileVersion" ;
      Write-Host "Protobufs Version     : $protoVersion" ;
      Write-Host "Version               : $version" ;
      Write-Host "Version suffix        : $suffix" ;
      "PROJECT_VERSION=v$version`nVERSION_SUFFIX=$suffix`nVERSION_TIMESTAMP=$timestamp" |
          Out-File -FilePath ./version.env -Encoding ascii ;
      "${version}${suffix}" | Out-File -FilePath ./version.txt -Encoding ascii ;
      if ($assemblyVersion -ne $assemblyFileVersion) {
          Write-Host -Fore Red "ERROR: Assembly Version must equal Assembly File Version" ;
      }
      if ($version -ne $protoVersion) {
          Write-Host -Fore Red "ERROR: Protobufs project version must equal the EntityImportClient Version" ;
      }
      if ($env:CI_JOB_NAME -ne "version check release" -and ("v$version" -in $releases -or "v$protoVersion" -in $releases)) {
          Write-Host -Fore Red "ERROR: A release for this version ($version) already exists." ;
          exit 1
      }
      if ($env:CI_JOB_NAME -eq "version check release" -and (
          "v$protoVersion" -ne $env:CI_COMMIT_TAG -or "v$version" -ne $env:CI_COMMIT_TAG)) {
          Write-Host -Fore Red "ERROR: The project version $version does not match the release tag version ${env:CI_COMMIT_TAG}" ;
          exit 1 ;
      }
  artifacts:
    reports:
      dotenv: version.env
    expose_as: Build Version
    paths: ['version.txt']

version check release:
  extends:
    - version check dev
    - .rules_release

package exe dev:
  stage: package
  extends:
    - .rules_dev_manual
  needs:
    - build dev
    - test dev
    - version check dev
  script:
    - cp -Recurse -Force .\EntityImportClient\bin\$CONFIG\* .\$PACKAGE_NAME_EXE\
  artifacts:
    name: '$PACKAGE_NAME_EXE-$PROJECT_VERSION'
    paths:
      - $PACKAGE_NAME_EXE/
    expire_in: 3 months

package exe release:
  extends:
    - package exe dev
    - .rules_release
  needs:
    - build release
    - test release
    - version check release
  artifacts:
    expire_in: 2 hours

sign exe release:
  stage: sign
  image: registry.gitlab.com/reductech/containers/codesigning
  cache: {}
  extends:
    - .rules_release
  needs:
    - package exe release
    - version check release
  variables:
    DOCKER_AUTH_CONFIG: $RT_SIGN_REGISTRY
    TIMESTAMP_SERVER: http://timestamp.sectigo.com
    ALGO_FILE_DIGEST: SHA256
    ALGO_TIME_DIGEST: SHA256
  script:
    - signtool.exe sign /f $RT_CERT_PATH /p $RT_CERT_PASS /fd $ALGO_FILE_DIGEST
      /tr $TIMESTAMP_SERVER /td $ALGO_TIME_DIGEST .\$PACKAGE_NAME_EXE\EntityImportClient.exe
  artifacts:
    name: '$PACKAGE_NAME_EXE-$PROJECT_VERSION'
    paths:
      - $PACKAGE_NAME_EXE/
    expire_in: never

package nuget dev:
  script:
    - dotnet pack .\EntityImportClient.Proto\EntityImportClient.Proto.csproj
      --configuration $CONFIG_DEV --version-suffix $VERSION_SUFFIX --output ./
  artifacts:
    name: '$PACKAGE_NAME_NUGET-$PROJECT_VERSION$VERSION_SUFFIX.nupkg'

package nuget release:
  script:
    - dotnet pack .\EntityImportClient.Proto\EntityImportClient.Proto.csproj
      --configuration $CONFIG_RELEASE --output ./
  artifacts:
    name: '$PACKAGE_NAME_NUGET-$PROJECT_VERSION.nupkg'

package dll release:
  rules:
    - when: never

secret_detection:
  image: mcr.microsoft.com/dotnet/sdk:6.0
  tags: []

code coverage dev:
  image: mcr.microsoft.com/dotnet/sdk:6.0
  tags: []

mutation testing:
  rules:
    - when: never
